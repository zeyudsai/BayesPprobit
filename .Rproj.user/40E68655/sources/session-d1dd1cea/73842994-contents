---
title: "Getting Started with BayesPprobit"
author: "Zeyu Ding"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{Getting Started with BayesPprobit}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.width = 7,
  fig.height = 5
)
library(BayesPprobit)
```

## Introduction

The **BayesPprobit** package implements Bayesian p-generalized probit regression, providing flexible modeling of binary outcomes with heavy-tailed or light-tailed link functions controlled by the shape parameter \( p \). The package allows for efficient MCMC sampling and includes tools for model diagnostics.

### Key Features

- Flexible p-generalized probit models
- MCMC sampling with multiple chains
- Comprehensive diagnostic tools

## Quick Start

### Installation

```{r eval=FALSE}
# Install from CRAN (if available)
#install.packages("BayesPprobit")

# Or install the development version from GitHub
#devtools::install_github("zeyudsai/BayesPprobit")
```

### Basic Usage

Let's start with a simple example using simulated data:

```{r}
# Generate example data
set.seed(123)
n <- 1000  # number of observations
d <- 5     # number of features

# Design matrix
X <- matrix(rnorm(n * d), n, d)
colnames(X) <- paste0("X", 1:d)

# True parameters
beta_true <- c(1.5, -0.8, 0.6, -0.4, 0.2)
p_true <- 2

# Generate response
eta <- X %*% beta_true
alpha <- p_scale(p_true)
prob <- gnorm::pgnorm(eta, mu = 0, alpha = alpha, beta = p_true)
y <- rbinom(n, 1, prob)

# Fit model
fit <- multi_chain(
  n_sim = 500,
  burn_in = 100,
  X = X,
  y = y,
  initial_theta = rep(0, d),
  initial_p = 2,
  mh_iter = 100,
  p_range = c(1, 3),
  step_size = 0.05,
  n_chains = 2
)
```

**Note**: Ensure that the `gnorm` package is installed to use `pgnorm`:

```{r eval=FALSE}
#install.packages("gnorm")
```

### Examining Results

```{r}
# Plot MCMC chains
plot_chains <- function(fit) {
  par(mfrow = c(2, 2))
  
  # Plot p parameter chain
  plot(fit$p_chains[[1]], type = "l",
       xlab = "Iteration", ylab = "p",
       main = "Trace Plot of p")
  abline(h = p_true, col = "red", lty = 2)
  
  # Plot first beta parameter
  plot(fit$beta_chains[[1]][, 1], type = "l",
       xlab = "Iteration", ylab = expression(beta[1]),
       main = "Trace Plot of β1")
  abline(h = beta_true[1], col = "red", lty = 2)
  
  # Plot posterior density of p
  density_p <- density(fit$p_chains[[1]])
  plot(density_p, main = "Posterior Density of p",
       xlab = "p")
  abline(v = p_true, col = "red", lty = 2)
  
  # Plot true vs estimated betas
  plot(beta_true, fit$posterior_beta,
       xlab = "True β", ylab = "Estimated β",
       main = "True vs Estimated β")
  abline(0, 1, col = "red", lty = 2)
}

plot_chains(fit)
```

## Model Details

### The p-Generalized Probit Model

The p-generalized probit model extends standard probit regression by using a p-generalized Gaussian distribution (p-GGD) as the link function. The probability model is:

\[ P(Y_i = 1 \mid X_i) = \Phi_p(X_i^\top\beta) \]

where \( \Phi_p \) is the cumulative distribution function (CDF) of the p-GGD.

The parameter \( p \) controls the tail behavior:

- \( p = 1 \): Similar to logistic regression
- \( p = 2 \): Standard probit regression
- \( p > 2 \): Heavier tails
- \( p < 2 \): Lighter tails

### MCMC Sampling

The sampling algorithm uses a Metropolis-Hastings within Gibbs scheme:

1. **Sample latent variables \( Z \)** from truncated p-GGD.
2. **Update regression coefficients \( \beta \)** via Gibbs sampling.
3. **Update \( p \)** via Metropolis-Hastings steps.

## Advanced Topics

### Convergence Diagnostics

It's important to check MCMC convergence using multiple diagnostics. The **BayesPprobit** package integrates with the `coda` package for convergence diagnostics:

```{r}
library(coda)

# Convert chains to mcmc.list
beta_mcmc <- mcmc.list(lapply(fit$beta_chains, mcmc))
p_mcmc <- mcmc.list(lapply(fit$p_chains, mcmc))

# Gelman-Rubin diagnostic for beta parameters
gelman_beta <- gelman.diag(beta_mcmc)
print(gelman_beta)

# Gelman-Rubin diagnostic for p parameter
gelman_p <- gelman.diag(p_mcmc)
print(gelman_p)
```

### Parameter Tuning

Guidelines for tuning key parameters:

1. **MCMC parameters**
   - `n_sim`: Typically 2000-5000 iterations.
   - `burn_in`: 20-25% of total iterations.
   - `mh_iter`: Number of Metropolis-Hastings iterations for updating `p`.
   - `step_size`: Proposal step size for `p` updates.
   - `n_chains`: At least 3 chains for convergence diagnostics.

2. **Parameter ranges**
   - `p_range`: Range of acceptable values for `p`, e.g., `c(1, 3)`.

## Real Data Example

Let's analyze a real dataset:

```{r eval=FALSE}
# Load the 'PimaIndiansDiabetes' dataset from 'mlbench' package
#install.packages("mlbench")
library(mlbench)
data(PimaIndiansDiabetes)
data <- PimaIndiansDiabetes

# Preprocess
X <- as.matrix(data[, -9])  # Remove the response variable
y <- ifelse(data$diabetes == "pos", 1, 0)

# Standardize predictors
X <- scale(X)

# Fit model
fit_real <- multi_chain(
  n_sim = 500,
  burn_in = 100,
  X = X,
  y = y,
  initial_theta = rep(0, ncol(X)),
  initial_p = 2,
  mh_iter = 100,
  p_range = c(1, 3),
  step_size = 0.05,
  n_chains = 2
)

# Examine results
summary(fit_real)
plot_chains(fit_real)
```

**Note**: This example uses the Pima Indians Diabetes dataset, which is available in the `mlbench` package.

## Performance Tips

1. **Use multiple chains**: Parallelize chains for faster computation.
2. **Adjust MCMC parameters**: Increase `n_sim` and adjust `step_size` for better convergence.
3. **Monitor convergence**: Use diagnostics like Gelman-Rubin statistics.
4. **Standardize predictors**: Improves numerical stability.

## References

- Ding, Z., et al. (2024). *Scalable Bayesian p-generalized probit and logistic regression*. Advances in Data Analysis and Classification 
- Munteanu, A., et al. (2022). *p-Generalized probit regression and scalable maximum likelihood estimation*. International Conference on Artificial Intelligence and Statistics

## Session Info

```{r}
sessionInfo()
```

